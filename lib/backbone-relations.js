// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(root, factory) {
  if ((typeof define !== "undefined" && define !== null ? define.amd : void 0)) {
    return define(['exports', 'backbone', 'underscore'], factory);
  } else if ((typeof exports !== "undefined" && exports !== null)) {
    return factory(exports, require('backbone'), require('underscore'));
  } else {
    return factory(root, root.Backbone, root._);
  }
})(this, function(exports, Backbone, _) {
  var RelationalModel;
  RelationalModel = (function(_super) {
    var _base;

    __extends(RelationalModel, _super);

    function RelationalModel() {
      return RelationalModel.__super__.constructor.apply(this, arguments);
    }

    if ((_base = RelationalModel.prototype).models == null) {
      _base.models = {};
    }

    RelationalModel.registerModel = function(name) {
      this.prototype.__name__ = name;
      return this.prototype.models[name] = this;
    };

    RelationalModel._relational = {
      define: function(name, model, plural, options) {
        if (this._associations == null) {
          this._associations = {};
        }
        return this._associations[name] = {
          name: name,
          plural: plural,
          model: model,
          embeds: options.embeds,
          embedded: options.embedded,
          through: options.through,
          inverse: options.inverse
        };
      }
    };

    RelationalModel.many = function(name, model, options) {
      this._relational.define.call(this, name, model, true, options);
      this.prototype.mutators[name] = function() {
        var Collection, definition, inverse, _ref, _ref1, _ref2;
        if (this["_" + name]) {
          return this["_" + name];
        }
        definition = this.constructor._associations[name];
        model = this.constructor.prototype.models[definition.model];
        Collection = Backbone.Collection.extend({
          model: model
        });
        switch (false) {
          case !definition.embeds:
            this["_" + name] = new Collection((_ref = this.get('linked')) != null ? _ref[name] : void 0);
            inverse = definition.inverse;
            if (model._associations[inverse]) {
              this["_" + name].each(function(member) {
                return member["_" + inverse] = this;
              }, this);
            } else {
              throw "" + model.prototype.__name__ + " missing inverse association '" + inverse + "'";
            }
            break;
          case !definition.through:
            if (model._associations[definition.through].plural) {
              this["_" + name] = new Collection;
              this.get(definition.through).each(function(member) {
                var _ref1, _ref2;
                return this["_" + name].add((_ref1 = member.get((_ref2 = definition.source) != null ? _ref2 : name)) != null ? _ref1.models : void 0);
              }, this);
            } else {
              this["_" + name] = (_ref1 = this.get(definition.through)) != null ? _ref1.get((_ref2 = definition.source) != null ? _ref2 : name) : void 0;
            }
            break;
          default:
            throw "many " + name + " must be #embeds or #through";
        }
        return this["_" + name];
      };
      return this._associations[name];
    };

    RelationalModel.one = function(name, model, options) {
      this._relational.define.call(this, name, model, false, options);
      this.prototype.mutators[name] = function() {
        var data, definition;
        if (this["_" + name]) {
          return this["_" + name];
        }
        definition = this.constructor._associations[name];
        return data = (function() {
          switch (false) {
            case !definition.embedded:
              throw "" + this + " must be instantiated from " + name + ", eg " + name + ".get('" + definition.inverse + "')";
              break;
            default:
              throw "" + this.__name__ + " one " + name + " must be #embeds";
          }
        }).call(this);
      };
      return this._associations[name];
    };

    return RelationalModel;

  })(Backbone.Model);
  exports.RelationalModel = RelationalModel;
});
